PWA:
Simple installation. PWAs don’t distribute via app stores, 
can be shared using a link and installed directly from a mobile website.
Even for those who develop only for iOS and Android, 
this means a huge savings in app development time and effort. 
PWAs offer the promise of being able to develop a single app 
and have it work perfectly across all your platforms and devices.



Progressive. 
By definition, a progressive web app must work on any device and enhance progressively, 
taking advantage of any features available on the user’s device and browser.


* Progressive
* Discoverable
* Linkable ( use the URI to indicate the current state of application )
* Safe
* Fast

What is different:
developing a PWA takes significantly less time and money: 
you can spend 10–15% more front-end coding resources 
on your web app and have a mobile PWA to go along with it
you only need JavaScript developers to create a PWA 
as opposed to Swift/Java for native mobile apps
a PWA can access as many features of your device as your browser, 
which may be less than a native app.
https://medium.com/awebdeveloper/pwa-is-future-of-mobile-how-to-tame-it-855dd42df0ec


-responsiv
-offline access
-push notifications
-simple install
- HTTP/2 connection - transfers data in chunks and is faster than HTTP/1;
- Service Workers - cache data and allow browsing a web app in poor network conditions or offline;
- Web App Manifest - makes a web app installable on a device 
  and adds it in the Apps menu of the OS.

* Build web apps that look and feel like native mobile apps for iOS and Android
* web apps that work without internet connection (offline-first)
* Leverage device features like the camera and geolocation in your web apps
* Use web push notifications to increase user engagement with your web apps
* A refresher on Promises and the Fetch API as both concepts are heavily used in PWAs 
* A way to synchronize data in the background, even if connection is lost
* How to access native device features like the camera or geolocation
* Using Workbox to make service worker management easier


2- Build a service worker and load it with a javascript. This will decide the implementation of your PWA. You can build your service worker for only offline, or only app icon, or push notification, or their combinations.
3- Build a Manifest file. This will include all the app details like app logo, app name, splash screen, theme color, etc.
4- Deploy your PWA now.

Automatic PWA converter:
https://www.escalatingweb.com/
- offline availability
- add install
- push notifications
- webshare
- web virtual reality (WebVR)
- awesome support ? 


WebAPK:
chrome://flags/#enable-improved-a2hs
https://www.youtube.com/watch?v=hnMyszjVqWU

Of course, since the flag to enable WebAPK installations 
only exists in the Dev and Canary channels on Chrome for Android, 
we are assuming that this feature is a WIP (work in progress) 
and thus not everything will work at this time. 



WebShare:
https://developers.google.com/web/updates/2016/09/navigator-share
This method, part of the simple Web Share API—written by Matt Giuca 
on the Chrome team—allows you easily trigger the native Android share dialog, 
passing either a URL or text to share. 
This is an important API as it gives your end-users user control 
of how and where the data is shared.

examples:
airhorner.com
voice-memos.appspot.com
smaller-pictures.appspot.com


https://www.xda-developers.com/deeply-integrated-progressive-web-apps-are-already-live-for-chrome-on-android/
https://www.quora.com/Whats-the-difference-between-Progressive-web-apps-and-regular-web-apps?share=1


WebWorkers:
https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers


<link rel="manifest" href="manifest.json" />
<link rel="apple-touch-icon-precomposed" href="imgs/icon.png" />
<link rel="icon" href="imgs/icon.png" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="application-name" content="SVGOMG" />


https://developer.mozilla.org/en-US/docs/Web/Manifest

manifest.json:
{
  "name": "SVGOMG",
  "scope": "./",
  "icons": [{
    "src": "imgs/icon.png",
    "sizes": "600x600"
  }],
  "background_color": "#bababa",
  "display": "standalone",
  "start_url": "./",
  "theme_color": "#303F9F"
}



PWAs have limited capabilities when it comes to offering integration 
with a smartphone or tablet’s hardware features such as NFC and Bluetooth 
functionality as well as the device’s sensor package (accelerometer, 
fingerprint sensor, etc.). 
This prevents PWAs from being developed for use with mobile accessories 
and “wearables” like smart watches, fitness trackers and wireless earphones.




he service worker is a JavaScript file that operates in the background. 
It is responsible for the offline functionality of the progressive 
web app through timely content caching.
Also, important is the app manifest, a simple JSON file. 
It helps the device to recognize the PWA and defines 
how it will be displayed on the screen.

Fast: Reports show that 53% of users abandon your site 
if it takes over 3 seconds to load. And obviously you won’t want 
the users to go back. Hence, your app should be fast.
