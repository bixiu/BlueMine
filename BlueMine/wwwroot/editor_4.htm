<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <meta charset="utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <title>WYSIWYG</title>

    <!--
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=10.00, user-scalable=yes" />
    -->
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=0.00, maximum-scale=10.00, user-scalable=yes" />


    <style type="text/css">
        html, body {
            width: 100%;
            height: 100%;
            margin: 0px;
            padding: 0px;
        }


        * {
            margin: 0px;
            padding: 0px;
            box-sizing: border-box;
            #white-space-collapse: discard;
        }
    </style>



    <style>
        body {
            font-family: Verdana;
            font-size: 18px;
        }
    </style>

    <script>

        // Commercial alternative: https://xdsoft.net/jodit/play.html
        // document.getElementsByTagName("title")[0].firstChild.nodeValue
        // var myTitle = document.getElementById("demo").childNodes[0].nodeValue;

        /**

        https://stackoverflow.com/questions/3534142/how-to-get-glatlng-object-from-address-string-in-advance-in-google-maps

        https://chatbotsjournal.com/25-chatbot-platforms-a-comparative-table-aeefc932eaff
        https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f

        https://medium.com/the-node-js-collection/modern-javascript-explained-for-dinosaurs-f695e9747b70




        In the JavaScript world, one frequently hears the words shim and polyfill.
        What are those things and what is the difference between them?

        Shim. A shim is a library that brings a new API to an older environment,
        using only the means of that environment.

        Polyfill.
        A polyfill is a piece of code (usually JavaScript on the Web)
        used to provide modern functionality on older browsers that do not natively support it.
        Thus, a polyfill is a browser-related shim.

        In October 2010, Remy Sharp blogged about the term “polyfill” [via Rick Waldron]:
        Polyfilla is a UK product known as Spackling Paste in the US.
        With that in mind: think of the browsers as a wall with cracks in it.
        These [polyfills] help smooth out the cracks and give us
        a nice smooth wall of browsers to work with.




        Lord Vishnu/Transcendental (Vaikuntha;Supreme Personality of Godness)
        Lord Odin/Transcendence (Valhalla; Hall of the Gods)

        Lord Odin/ofAsgard  (Valhalla; Hall of the Gods)
        Odin of Asgard/Transcendental (Valhalla; Hall of the Gods)
        Sigmund/theHero (Valkyries; guardians of the slain)
        Haimdall/GandsonOfAegir (Asgard; ever-vigilant guardian of the gods’ stronghold)
        Heimdall stood guard over Asgard, the home of the gods.
        He lived near Bifrost, the rainbow bridge that connected Asgard
        to the world of humans and from there kept watch for the approach of the giants,
        who were the enemies of the gods.

        Not MSIE/1.0 Not Mozilla/4.0 Mozilla/5.0 , NOR Safari/1.0, NOR Safari/1.0, Not Opera/1.0 , NOR OPR/1.0 NOR Chrome/1.0 NOR Chromium/1.0
        (NOT KHTML, and nothing like Gecko).
        (not compatible; Not Konqueror/3.2; Not FreeBSD)
        */

        // https://stackoverflow.com/questions/3545018/selected-text-event-trigger-in-javascript
        function dispachSelectedEvent()
        {
            //$('div').mouseup(function() {
            //    var text=getSelectedText();
            //    if (text!='') alert(text);
            //});

            function getSelectedText()
            {
                if (window.getSelection)
                {
                    return window.getSelection().toString();
                } else if (document.selection)
                {
                    return document.selection.createRange().text;
                }
                return '';
            }
        }



        // http://codetheory.in/javascript-document-execcommand-web-method/
        // https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand
        // https://codepen.io/netsi1964/full/QbLLGW/
        // https://w3c.github.io/editing/execCommand.html
        // window.clipboardData.getData('Text')
        // JavaScript document.execCommand('copy')

        function removeFormat(me)
        {
            var commandName = "removeFormat";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = null; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }

        function bold(me)
        {
            var commandName = "bold";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = null; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }

        function foreColor(me)
        {
            var commandName = "foreColor";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = "#FF00FF"; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }


        function fontSize(me)
        {
            var commandName = "fontSize";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = "20px"; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }


        // https://stackoverflow.com/questions/5222814/window-getselection-return-html
        function getSelectionHtml()
        {
            // debugger;
            var html = "";
            if (typeof window.getSelection != "undefined")
            {
                var sel = window.getSelection();
                if (sel.rangeCount)
                {
                    var container = document.createElement("div");
                    for (var i = 0, len = sel.rangeCount; i < len; ++i)
                    {
                        container.appendChild(sel.getRangeAt(i).cloneContents());
                    }
                    html = container.innerHTML;
                }
            } else if (typeof document.selection != "undefined")
            {
                if (document.selection.type == "Text")
                {
                    html = document.selection.createRange().htmlText;
                }
            }
            return html;
        }

        function removeSelection()
        {
            if (window.getSelection)
            {
                if (window.getSelection().empty)
                {  // Chrome
                    window.getSelection().empty();
                } else if (window.getSelection().removeAllRanges)
                {  // Firefox
                    window.getSelection().removeAllRanges();
                }
            } else if (document.selection)
            {  // IE?
                document.selection.empty();
            }
        }


        // https://stackoverflow.com/questions/16529316/javascript-document-execcommand-own-tags

        function custom(me)
        {
            var commandName = "insertHTML";
            var showDefaultUI = false; // not implemented in Mozilla.

            // For commands which require an input argument - Specify null if no argument is needed.

            // but... this strips all existing tags from the selection!
            // Potential problem: This removes all newlines from the selected text.
            //var valueArgument = "<span class='own-class'>" + document.getSelection() + "</span>";
            var valueArgument = getSelectionHtml();
            alert(valueArgument);
            valueArgument = "<span class='own-class'>" + valueArgument + "</span>";

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
            removeSelection();
        }


        function html2fragment_bad(html)
        {
            var parser = new DOMParser(),
                doc = parser.parseFromString(html, "text/xml"),
                documentFragment = document.createDocumentFragment();
            documentFragment.appendChild(doc.documentElement);

            return documentFragment;
        }

        function html2fragment_noIE(html)
        {
            var frag = document.createDocumentFragment(), lastNode;
            var tmp = document.createElement('body'), child;
            tmp.innerHTML = html;

            while (child = tmp.firstElementChild)
            {
                lastNode = frag.appendChild(child);
            }

            return frag;
        }


        function moveUpward(ele)
        {
            var el = ele;

            do
            {
                console.log(el);
            } while ((el = el.previousElementSibling || el.parentElement || null) != null && el != document.body)

        }



        // https://javascript.info/dom-navigation
        // https://stackoverflow.com/questions/7935689/what-is-the-difference-between-children-and-childnodes-in-javascript
        // In a node tree, the top node is called the root (or root node)
        // Every node has exactly one parent, except the root (which has no parent)
        // A node can have a number of children
        // Siblings(brothers or sisters) are nodes with the same parent
        function moveDownward(ele)
        {
            var el = ele;
            // debugger;

            // while el is descendant of some container
            // document.body.contains(document.getElementById("lol"))
            while (el != null && document.body.contains(el))
            {
                console.log(el);


                if (el.nextElementSibling)
                {
                    el = el.nextElementSibling;
                    continue;
                }

                while (true)
                {
                    if (el.parentElement)
                    {
                        if (el.parentElement.nextElementSibling)
                        {
                            el = el.parentElement.nextElementSibling;
                            break;
                        }
                        else
                            el = el.parentElement;
                    }
                    else
                    {
                        el = null;
                        break;
                    }
                }

                if (el == null)
                    break;

                //if (el.children.length != 0)
                //{
                //    el = el.firstElementChild;
                //}
            }

        }




        function test()
        {
            moveUpward(document.getElementById("lol"));
            moveDownward(document.getElementById("lol"));
        }


        function insertHtmlBeforeSelection(html)
        {
            console.log("before")

            html = '<img src="http://www.lehrstellenboerse.ch/images/show_image?image_id=2116" width="200px" height="100px" />';


            m++;
            if (window.getSelection)
            {

                var sel = window.getSelection();
                var range = sel.getRangeAt(0);

                var frag = document.createDocumentFragment();

                // frag.innerHTML = html;

                // var img = document.createElement("img");
                // add image properties here
                // frag.appendChild(img);
                var tmp = document.createElement('body'), child;
                tmp.innerHTML = html;
                while (child = tmp.firstElementChild)
                {
                    frag.appendChild(child);
                }


                range.insertNode(frag);
            } else if (document.selection && document.selection.createRange)
            {
                // document.selection.createRange().pasteHTML(html);

                range = document.selection.createRange();
                var expandedSelRange1 = range.duplicate();
                range.collapse(true);
                var expandedSelRange = range.duplicate();
                range.pasteHTML(html);

                expandedSelRange.setEndPoint("EndToEnd", expandedSelRange1);
                expandedSelRange.select();
            }
        }

        function insertHtmlAfterSelection(html)
        {
            console.log("after")
            n++;

            var sel, range, expandedSelRange, node;
            if (window.getSelection)
            {
                sel = window.getSelection();
                if (sel.getRangeAt && sel.rangeCount)
                {
                    range = window.getSelection().getRangeAt(0);
                    expandedSelRange = range.cloneRange();
                    range.collapse(false);

                    // Range.createContextualFragment() would be useful here but is
                    // non-standard and not supported in all browsers (IE9, for one)


                    var el = document.createElement("div");
                    el.innerHTML = html;

                    var frag = document.createDocumentFragment(), node, lastNode;
                    while ((node = el.firstChild))
                    {
                        lastNode = frag.appendChild(node);
                    }

                    range.insertNode(frag);

                    // Preserve the selection
                    if (lastNode)
                    {
                        expandedSelRange.setEndAfter(lastNode);
                        sel.removeAllRanges();
                        sel.addRange(expandedSelRange);
                    }
                }
            } else if (document.selection && document.selection.createRange)
            {
                range = document.selection.createRange();
                expandedSelRange = range.duplicate();
                range.collapse(false);
                range.pasteHTML(html);
                expandedSelRange.setEndPoint("EndToEnd", range);
                expandedSelRange.select();
            }
        }


        function replaceSelectionHtml(before, after, cleanUp)
        {
            // console.log("before")

            var valueArgument = getSelectionHtml();
            // console.log("valueArgument", valueArgument);
            var html = before + cleanUp(valueArgument) + after;
            // console.log("html", html);


            m++;
            if (window.getSelection)
            {

                var sel = window.getSelection();
                var range = sel.getRangeAt(0);

                range.deleteContents();

                var temp = document.createElement("div");
                temp.innerHTML = html;

                var frag = document.createDocumentFragment(), node, lastNode;
                while ((node = temp.firstChild))
                {
                    lastNode = frag.appendChild(node);
                }

                range.insertNode(frag);

                if (lastNode)
                {
                    range.setStartBefore(lastNode);
                    range.setEndAfter(lastNode);

                    // range.setStartAfter(null);
                    // range.setEndBefore(null);

                    sel.removeAllRanges();
                    sel.addRange(range);
                }

            }
            else if (document.selection && document.selection.createRange)
            {
                // https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa741548(v%3dvs.85)
                // https://www.codeproject.com/Questions/897645/Replacing-selected-text-HTML-JavaScript
                // https://stackoverflow.com/questions/3053542/how-to-get-the-start-and-end-points-of-selection-in-text-area
                var range = document.selection.createRange();
                var leftSide = range.getBookmark();
                var newRange = range.duplicate();
                var rightSide = range.duplicate();
                range.pasteHTML(html);

                newRange.moveToBookmark(leftSide);
                newRange.setEndPoint("EndToStart", rightSide);
                newRange.select();
            }
        }





        function TOFIXinserHtmlBeforeAfter(before, after)
        {
            if (before != null)
                insertHtmlBeforeSelection(before)

            if (after != null) insertHtmlAfterSelection(after)
        }


        // compareStrings(string1, string2, true, false)
        function compareStrings(string1, string2, ignoreCase, useLocale)
        {
            if (string1 == null && string2 == null)
                return true;

            if (string1 == null || string2 == null)
                return false;

            if (ignoreCase)
            {
                if (useLocale)
                {
                    string1 = string1.toLocaleLowerCase();
                    string2 = string2.toLocaleLowerCase();
                }
                else
                {
                    string1 = string1.toLowerCase();
                    string2 = string2.toLowerCase();
                }
            }

            return string1 === string2;
        }





        function inserHtmlBeforeAfter(before, after)
        {
            if (before != null)


                // replaceSelectionHtml("<div style='font-size: 20px; font-weight: bold; display: inline-block;'>", "</div>");



                function allDescendants(node)
                {

                    for (var i = 0; i < node.childNodes.length; i++)
                    {
                        var child = node.childNodes[i];
                        allDescendants(child);
                    }

                    // console.log("cchild", node);
                    //my_elem.parentNode.insertBefore(span, my_elem);

                    if (compareStrings(node.tagName, "b", true, false))
                    {
                        // console.log("match innerHTML", node.innerHTML);
                        // console.log("match node", node);
                        // console.log("match node.parent", node.parentElement);
                        node.insertAdjacentHTML('beforebegin', node.innerHTML);
                        node.parentElement.removeChild(node);
                    }


                    console.log("cchild.inner", node.innerHTML);
                    // doSomethingToNode(child);
                }

            replaceSelectionHtml("<b>", "</b>", function cu(html)
            {
                console.log("cu");

                var temp = document.createElement("div");
                temp.innerHTML = html;

                console.log("temp old", temp.innerHTML);
                allDescendants(temp);
                console.log("temp new", temp.innerHTML);

                return temp.innerHTML;
            });

            // if (after != null) insertHtmlAfterSelection(after)
        }


        function foo(me)
        {
            bold(me);
            foreColor(me);
            //custom(me);
        }


        var m = n = 0;
    </script>




</head>
<body>

    <input type="button" value="OK" onclick="foo(this);" />
    <input type="button" value="CUST" onclick="custom(this);" />
    <input type="button" value="BEF" onclick="insertHtmlBeforeSelection('<div style=\'background-color: red; display: inline-block;\'>' + m + '</div>');" />
    <input type="button" value="AFT" onclick="insertHtmlAfterSelection('<div style=\'background-color: green; display: inline-block;\'>' + n + '</div>');" />

    <input type="button" value="B" onclick="inserHtmlBeforeAfter('<h1>', '</h1>');" />


    <input type="button" value="LOG" onclick="console.log(document.body.innerHTML);" />




    <div id="editor" style="width: 15cm; height: 2cm; padding: 0.25cm; background-color: dodgerblue;" contenteditable="true">
        this is a simple test
    </div>

    <script>

    </script>

</body>
</html>
