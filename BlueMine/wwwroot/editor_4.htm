<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <meta charset="utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <title>WYSIWYG</title>

    <!--
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=10.00, user-scalable=yes" />
    -->
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=0.00, maximum-scale=10.00, user-scalable=yes" />


    <style type="text/css">
        html, body {
            width: 100%;
            height: 100%;
            margin: 0px;
            padding: 0px;
        }


        * {
            margin: 0px;
            padding: 0px;
            box-sizing: border-box;
            #white-space-collapse: discard;
        }
    </style>



    <style>
        body 
        {
            font-family: Verdana;
            font-size: 18px;
        }

    </style>

    <script>
        
        
        
        // https://stackoverflow.com/questions/3545018/selected-text-event-trigger-in-javascript
        function dispachSelectedEvent()
        {
            //$('div').mouseup(function() {
                //    var text=getSelectedText();
                //    if (text!='') alert(text);
            //});
            
            function getSelectedText() {
                if (window.getSelection) {
                    return window.getSelection().toString();
                } else if (document.selection) {
                    return document.selection.createRange().text;
                }
                return '';
            }​
        }
        
        
        // http://codetheory.in/javascript-document-execcommand-web-method/
        // https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand
        // https://codepen.io/netsi1964/full/QbLLGW/
        // https://w3c.github.io/editing/execCommand.html
        // window.clipboardData.getData('Text') 
        // JavaScript document.execCommand('copy') 

        function removeFormat(me)
        {
            var commandName = "removeFormat";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = null; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }

        function bold(me)
        {
            var commandName = "bold";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = null; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }

        function foreColor(me)
        {
            var commandName = "foreColor";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = "#FF00FF"; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }


        function fontSize(me)
        {
            var commandName = "fontSize";
            var showDefaultUI = false; // not implemented in Mozilla.
            var valueArgument = "20px"; // For commands which require an input argument - Specify null if no argument is needed.

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
        }


        // https://stackoverflow.com/questions/5222814/window-getselection-return-html
        function getSelectionHtml()
        {
            // debugger;
            var html = "";
            if (typeof window.getSelection != "undefined")
            {
                var sel = window.getSelection();
                if (sel.rangeCount)
                {
                    var container = document.createElement("div");
                    for (var i = 0, len = sel.rangeCount; i < len; ++i)
                    {
                        container.appendChild(sel.getRangeAt(i).cloneContents());
                    }
                    html = container.innerHTML;
                }
            } else if (typeof document.selection != "undefined")
            {
                if (document.selection.type == "Text")
                {
                    html = document.selection.createRange().htmlText;
                }
            }
            return html;
        }

        function removeSelection()
        {
            if (window.getSelection)
            {
                if (window.getSelection().empty)
                {  // Chrome
                    window.getSelection().empty();
                } else if (window.getSelection().removeAllRanges)
                {  // Firefox
                    window.getSelection().removeAllRanges();
                }
            } else if (document.selection)
            {  // IE?
                document.selection.empty();
            }
        }


        // https://stackoverflow.com/questions/16529316/javascript-document-execcommand-own-tags
        
        function custom(me)
        {
            var commandName = "insertHTML";
            var showDefaultUI = false; // not implemented in Mozilla.

            // For commands which require an input argument - Specify null if no argument is needed.

            // but... this strips all existing tags from the selection! 
            // Potential problem: This removes all newlines from the selected text. 
            //var valueArgument = "<span class='own-class'>" + document.getSelection() + "</span>"; 
            var valueArgument = getSelectionHtml();
            alert(valueArgument);
            valueArgument = "<span class='own-class'>" + valueArgument + "</span>"; 

            // execCommand() will affect the currently active editable element.
            document.execCommand(commandName, showDefaultUI, valueArgument);
            removeSelection();
        }


        function html2fragment_bad(html)
        {
            var parser = new DOMParser(),
                doc = parser.parseFromString(html, "text/xml"),
                documentFragment = document.createDocumentFragment();
            documentFragment.appendChild(doc.documentElement);

            return documentFragment;
        }

        function html2fragment(html)
        {
            var frag = document.createDocumentFragment(), lastNode;
            var tmp = document.createElement('body'), child;
            tmp.innerHTML = html;

            while (child = tmp.firstElementChild)
            {
                lastNode = frag.appendChild(child);
            }

            return frag;
        }



        function insertHtmlBeforeSelection(html)
        {
            console.log("before")

            m++;
            if (window.getSelection)
            {

                var sel = window.getSelection();
                var range = sel.getRangeAt(0);
                
                var frag = document.createDocumentFragment();

                // frag.innerHTML = html;

                // var img = document.createElement("img");
                // add image properties here
                // frag.appendChild(img);
                var tmp = document.createElement('body'), child;
                tmp.innerHTML = html;
                while (child = tmp.firstElementChild)
                {
                    frag.appendChild(child);
                }
                

                range.insertNode(frag);
            } else if (document.selection && document.selection.createRange)
            {
                // document.selection.createRange().pasteHTML(html);

                range = document.selection.createRange();
                var expandedSelRange1 = range.duplicate();
                range.collapse(true);
                var expandedSelRange = range.duplicate();
                range.pasteHTML(html);

                expandedSelRange.setEndPoint("EndToEnd", expandedSelRange1);
                expandedSelRange.select();
            }
        }

        function insertHtmlAfterSelection(html)
        {
            console.log("after")
            n++;

            var sel, range, expandedSelRange, node;
            if (window.getSelection)
            {
                sel = window.getSelection();
                if (sel.getRangeAt && sel.rangeCount)
                {
                    range = window.getSelection().getRangeAt(0);
                    expandedSelRange = range.cloneRange();
                    range.collapse(false);

                    // Range.createContextualFragment() would be useful here but is
                    // non-standard and not supported in all browsers (IE9, for one)

                    
                    var el = document.createElement("div");
                    el.innerHTML = html;
                    
                    var frag = document.createDocumentFragment(), node, lastNode;
                    while ((node = el.firstChild))
                    {
                        lastNode = frag.appendChild(node);
                    }
                    

                    



                    range.insertNode(frag);

                    // Preserve the selection
                    if (lastNode)
                    {
                        expandedSelRange.setEndAfter(lastNode);
                        sel.removeAllRanges();
                        sel.addRange(expandedSelRange);
                    }
                }
            } else if (document.selection && document.selection.createRange)
            {
                range = document.selection.createRange();
                expandedSelRange = range.duplicate();
                range.collapse(false);
                range.pasteHTML(html);
                expandedSelRange.setEndPoint("EndToEnd", range);
                expandedSelRange.select();
            }
        }





        function replaceHtmlBeforeSelection(before, after)
        {
            console.log("before")

            m++;
            if (window.getSelection)
            {

                var sel = window.getSelection();
                var range = sel.getRangeAt(0);
                
                

                var valueArgument = getSelectionHtml();
                console.log("valueArgument", valueArgument);
                var html = before + valueArgument + after;
                console.log("html", html);
                
                
                range.deleteContents();
                
                var expandedSelRange = range.cloneRange();


                var el = document.createElement("div");
                el.innerHTML = html;

                var frag = html2fragment(html);

                

                range.insertNode(frag);
                var lastNode = frag;

                if (lastNode)
                {
                    console.log("sele")
                    // expandedSelRange.setEndAfter(lastNode);
                    // range.setStartAfter(frag);
                    range.setStartBefore(lastNode);
                    range.setEndAfter(lastNode);
                    // console.log("child",child);
                    console.log("lastNode", lastNode);

                    console.log("range", range);
                    var container = document.createElement("div");
                    container.appendChild(range.cloneContents());
                    console.log("contents", container.innerHTML);

                    


                    console.log(expandedSelRange);
                    sel.removeAllRanges();
                    sel.addRange(range);
                }

            } else if (document.selection && document.selection.createRange)
            {
                // https://www.codeproject.com/Questions/897645/Replacing-selected-text-HTML-JavaScript
                // document.selection.createRange().pasteHTML(html);

                range = document.selection.createRange();
                var expandedSelRange1 = range.duplicate();
                range.collapse(true);
                var expandedSelRange = range.duplicate();
                range.pasteHTML(html);

                expandedSelRange.setEndPoint("EndToEnd", expandedSelRange1);
                expandedSelRange.select();
            }
        }


        function TOFIXinserHtmlBeforeAfter(before, after)
        {
            if (before != null)
                insertHtmlBeforeSelection(before)
            
            if (after != null) insertHtmlAfterSelection(after)
        }



        function inserHtmlBeforeAfter(before, after)
        {
            if (before != null)
                replaceHtmlBeforeSelection("<div style='font-size: 20px; font-weight: bold; display: inline-block;'>", "</div>");
            
            // if (after != null) insertHtmlAfterSelection(after)
        }


        function foo(me)
        {
            bold(me);
            foreColor(me);
            //custom(me);
        }


        var m=n=0;
    </script>




</head>
<body>

    <input type="button" value="OK" onclick="foo(this);" />
    <input type="button" value="CUST" onclick="custom(this);" />
    <input type="button" value="BEF" onclick="insertHtmlBeforeSelection('<div style=\'background-color: red; display: inline-block;\'>' + m + '</div>');" />
    <input type="button" value="AFT" onclick="insertHtmlAfterSelection('<div style=\'background-color: green; display: inline-block;\'>' + n + '</div>');" />

    <input type="button" value="B" onclick="inserHtmlBeforeAfter('<h1>', '</h1>');" />
   
    
    <input type="button" value="LOG" onclick="console.log(document.body.innerHTML);" />
    


    
    <div id="editor" style="width: 15cm; height: 2cm; padding: 0.25cm; background-color: dodgerblue;" contenteditable="true">
        this is a simple test
    </div>

    <script>
        
    </script>

</body>
</html>
